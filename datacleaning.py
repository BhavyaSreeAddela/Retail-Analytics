# -*- coding: utf-8 -*-
"""DataCleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B_FjZVFbpa9au_2ozExuvAzkC0SAZJSe
"""

import pandas as pd

trxn = pd.read_csv('Retail_Data_Transactions.csv')

trxn

response = pd.read_csv('Retail_Data_Response.csv')

response

df = trxn.merge(response,on='customer_id' , how='left')

#df

df.dtypes
df.shape
df.head(5)

df.describe()

df.isnull().sum()

df=df.dropna()

df

df['trans_date']=pd.to_datetime(df['trans_date'])
df['response']=df['response'].astype('int64')

df.dtypes

set(df['response'])

#check for outliers
#z score

from scipy import stats
import numpy as np

z=np.abs(stats.zscore(df['tran_amount']))

threshold = 3

outlier = z>threshold
print(df[outlier])

#check for outliers
#z score

from scipy import stats
import numpy as np

z=np.abs(stats.zscore(df['response']))

threshold = 3

outlier = z>threshold
print(df[outlier])

import seaborn as sbs
import matplotlib.pyplot as plt

sbs.boxplot(x=df['response'])
plt.show()

import seaborn as sbs
import matplotlib.pyplot as plt

sbs.boxplot(x=df['tran_amount'])
plt.show()

#creating new columns

df['month']=df['trans_date'].dt.month

df

#which 3 months have gad the highest transaction amounts?

monthly_sales= df.groupby('month')['tran_amount'].sum()
monthly_sales=monthly_sales.sort_values(ascending=False).reset_index().head(3)
monthly_sales

cust_count=df['customer_id'].value_counts().reset_index()
cust_count.colums=['customer_id','count']
top_5=cust_count.sort_values(by='count' , ascending=False).head(5)
top_5

sbs.barplot(x='customer_id',y='count' , data=top_5)

cust_sales=df.groupby('customer_id')['tran_amount'].sum().reset_index()
#cust_count.colums=['customer_id','count']
top_5_sales=cust_sales.sort_values(by='tran_amount' , ascending=False).head(5)
top_5_sales

sbs.barplot(x='customer_id',y='tran_amount' , data=top_5_sales)

import matplotlib.dates as mdates

df['month_year']=df['trans_date'].dt.to_period('M')
monthly_sales = df.groupby('month_year')['tran_amount'].sum()

type(monthly_sales.index)
monthly_sales.index = monthly_sales.index.to_timestamp()

plt.figure(figsize=(12,6))
plt.plot(monthly_sales.index,monthly_sales.values)

plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=6))
plt.xlabel('Month-Year')
plt.ylabel('Sales')
plt.title('Monthly Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

df

"""COHORT SEGEMENTATION"""

#Recency
recency = df.groupby('customer_id')['trans_date'].max()
recency

# Sorted the data by customer_id and trans_date
data_sorted = df.sort_values(['customer_id', 'trans_date'])
data_sorted

## Calculate recency for each customer
data_sorted['recency'] = data_sorted.groupby('customer_id')['trans_date'].diff().dt.days
data_sorted

#frequncy
frequncy = df.groupby('customer_id')['trans_date'].count()
frequncy

#Monetary (CMV)
monetary = df.groupby('customer_id')['tran_amount'].sum()
monetary

#combine
rfm= pd.DataFrame({'recency':recency,'frequency':frequncy,'monetary':monetary})
rfm

#customer segmentation

def segment_customer(row):
  if row['recency'].year>=2012 and row['frequency']>=15 and row['monetory']>1000:
    return 'P0'
  elif (2011<=row['recency'].year<2012) and (10<=row['frequency']<15) and (500<=row['monetory']<=1000):
    return 'P1'
  else:
    return 'P2'

  rfm['Segemnt']= rfm.apply(segment_customer,axis=1)

rfm

def segment_customer(row):
    if row['recency'] and row['recency'].year >= 2012 and row['frequency'] >= 15 and row['monetary'] > 1000:
        return 'P0'
    elif (row['recency'].year < 2012 and row['recency'].year >= 2011) and (row['frequency'] < 15 and row['frequency'] > 10) and (row['monetary'] <= 1000 and row['monetary'] >= 500):
        return 'P1'
    else:
        return 'P2'

rfm['Segment'] = rfm.apply(segment_customer, axis=1)
print(set(rfm['Segment']))

rfm

#Count the number of churend

churn_counts = df['response'].value_counts()

#plot
churn_counts.plot(kind='bar')

#Analyzing top customers
top_5_cust=monetary.sort_values(ascending=False).head(5).index

top_5_cust_df=df[df['customer_id'].isin(top_5_cust)]

top_customer_sales=top_5_cust_df.groupby(['customer_id','month'])['tran_amount'].sum().unstack(level=0)
top_customer_sales.plot(kind='line')

df.to_csv('MainData.csv')
rfm.to_csv('AdditionalAnalysis.csv')